blueprint:
  name: Philips Hue Dimmer RWL022
  description: >
    Control a single light entity with a Philips Hue Dimmer Switch (v2), including temperature adjustment and starting brightness.
  domain: automation
  input:
    remote:
      name: Philips Hue Dimmer Switch
      description: Pick a RWL022 Dimmer Switch
      selector:
        device:
          integration: zha
          entity:
            domain: sensor
            device_class: battery
    light_entity:
      name: The light entity to control.
      description: The light entity to be controlled by the dimmer switch.
      selector:
        entity:
          domain: light
    brightness_steps:
      name: Percentage to increase or decrease brightness.
      description: The percentage to increase or decrease brightness when the button is pressed.
      selector:
        number:
          min: 1
          max: 25
          unit_of_measurement: "%"
      default: 18
    default_color_temp:
      name: Default Color Temperature
      description: The default color temperature when the light is turned on.
      selector:
        number:
          min: 1000
          max: 6500
          unit_of_measurement: "K"
          step: 100
      default: 4500
    starting_brightness:
      name: Starting Brightness
      description: The brightness level to set when the light is turned on.
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
      default: 100

mode: restart
max_exceeded: silent

variables:
  light_entity: !input "light_entity"
  brightness_steps: !input "brightness_steps"
  default_color_temp: !input "default_color_temp"
  starting_brightness: !input "starting_brightness"

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input "remote"
      cluster_id: 64512

action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      light_on: "{{ is_state(light_entity, 'on') }}"
  - choose:
      - conditions: "{{ command == 'on_short_release' }}"
        sequence:
          - choose:
              - conditions: "{{ light_on == false }}"
                sequence:
                  service: light.turn_on
                  data:
                    entity_id: !input "light_entity"
                    transition: 0.5
                    brightness_pct: "{{ starting_brightness }}"
                    color_temp: "{{ default_color_temp }}"
              - conditions: "{{ light_on == true }}"
                sequence:
                  service: light.turn_on
                  data:
                    entity_id: !input "light_entity"
                    transition: 0.5
                    brightness_step_pct: "{{ brightness_steps }}"
                    color_temp: "{{ state_attr(light_entity, 'color_temp') | default(default_color_temp) }}"

      - conditions: "{{ command == 'off_short_release' }}"
        sequence:
          service: light.turn_off
          data:
            entity_id: !input "light_entity"
            transition: 0.5

      - conditions:
          - condition: or
            conditions:
              - "{{ command == 'up_short_release' }}"
              - "{{ command == 'up_hold' }}"
        sequence:
          service: light.turn_on
          data:
            entity_id: !input "light_entity"
            transition: 0.5
            brightness_step_pct: "{{ brightness_steps }}"
            color_temp: "{{ state_attr(light_entity, 'color_temp') | default(default_color_temp) }}"

      - conditions:
          - condition: or
            conditions:
              - "{{ command == 'down_short_release' }}"
              - "{{ command == 'down_hold' }}"
        sequence:
          service: light.turn_on
          data:
            entity_id: !input "light_entity"
            transition: 0.5
            brightness_step_pct: "{{ brightness_steps*-1 }}"
            color_temp: "{{ state_attr(light_entity, 'color_temp') | default(default_color_temp) }}"
