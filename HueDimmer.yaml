blueprint:
  domain: automation
  name: Philips Hue v2 Smart Dimmer Switch and Remote
  description: Philips Hue v2 (RWL022) Smart Dimmer Switch and Remote using Zigbee Home Automation
  input:
    zha_devices:
      name: Philips Hue Smart Dimmer Switch and Remote
      description: Select one or more Philips Hue v2 (RWL022) Smart Dimmer Switch and Remote devices
      selector:
        device:
          integration: zha
          model: RWL022
          multiple: true
    light_entities:
      name: Lights
      description: The light entities to control
      selector:
        entity:
          domain: light
          multiple: true
    Top_Press:
      name: Top Press
      description: Top button (v2 - power on/off button) pressed (default - perform no action)
      default: []
      selector:
        action: null
    Top_Press2x:
      name: Top Press 2x
      description: Top button (v2 - power on/off button) pressed 2x (default - perform no action)
      default: []
      selector:
        action: null
    Top_Press3x:
      name: Top Press 3x
      description: Top button (v2 - power on/off button) pressed 3x (default - perform no action)
      default: []
      selector:
        action: null
    Top_Release:
      name: Top Release
      description: Top button (v2 - power on/off button) released (default - perform no action)
      default: []
      selector:
        action: null
    Top_HoldPress:
      name: Top Hold
      description: Top button (v2 - power on/off button) held down (default - perform no action)
      default: []
      selector:
        action: null
    Up_Press:
      name: Up Press
      description: Up button (brightness increase) pressed (default - increase brightness by 10%)
      default:
        service: light.turn_on
        data:
          brightness_step_pct: 10
          color_temp: 5000
      selector:
        action: null
    Up_Press2x:
      name: Up Press 2x
      description: Up button (brightness increase) pressed 2x (default - set brightness to maximum)
      default:
        service: light.turn_on
        data:
          brightness: 255
          color_temp: 5000
      selector:
        action: null
    Up_HoldPress:
      name: Up Hold
      description: Up button (brightness increase) held down (default - increase brightness by 20% every second)
      default:
        service: light.turn_on
        data:
          brightness_step_pct: 20
          color_temp: 5000
      selector:
        action: null
    Down_Press:
      name: Down Press
      description: Down button (brightness decrease) pressed (default - decrease brightness by 10%)
      default:
        service: light.turn_on
        data:
          brightness_step_pct: -10
          color_temp: 5000
      selector:
        action: null
    Down_Press2x:
      name: Down Press 2x
      description: Down button (brightness decrease) pressed 2x (default - set brightness to minimum)
      default:
        service: light.turn_on
        data:
          brightness: 1
          color_temp: 5000
      selector:
        action: null
    Down_HoldPress:
      name: Down Hold
      description: Down button (brightness decrease) held down (default - decrease brightness by 20% every second, with a minimum of 1%)
      default:
        service: light.turn_on
        data:
          brightness_step_pct: -20
          color_temp: 5000
      selector:
        action: null
    Bottom_Press:
      name: Bottom Press
      description: Bottom button (v2 - power off button) pressed (default - set light to white and turn off)
      default:
        service: light.turn_on
        data:
          color_name: "white"
          brightness: 1
          color_temp: 5000
      selector:
        action: null
    Bottom_Press2x:
      name: Bottom Press 2x
      description: Bottom button (v2 - power off button) pressed 2x (default - perform no action)
      default: []
      selector:
        action: null
    Bottom_Press3x:
      name: Bottom Press 3x
      description: Bottom button (v2 - power off button) pressed 3x (default - perform no action)
      default: []
      selector:
        action: null
mode: single
max_exceeded: silent
variables:
  device_ids: !input "zha_devices"
  light_entities: !input "light_entities"
trigger:
  - platform: event
    event_type: zha_event
condition: "{{ trigger.event.data.device_id in device_ids }}"
action:
  - variables:
      button: "{{ trigger.event.data.args.button }}"
      press_type: "{{ trigger.event.data.args.press_type }}"
      command_type: "{{ trigger.event.data.command }}"
  - choose:
      # Up Button (Button 2) - Increase Brightness
      - conditions: '{{ command_type == "up_press" }}'
        sequence:
          - service: light.turn_on
            data:
              entity_id: "{{ light_entities }}"
              brightness_step_pct: 10
              color_temp: 5000
      - conditions: '{{ command_type == "up_double_press" }}'
        sequence:
          - service: light.turn_on
            data:
              entity_id: "{{ light_entities }}"
              brightness: 255  # Set brightness to maximum
              color_temp: 5000
      - conditions: '{{ command_type == "up_hold" }}'
        sequence:
          - repeat:
              while:
                - condition: state
                  entity_id: "{{ trigger.event.data.device_id }}"
                  state: "on"  # Ensure that the light is still on
              sequence:
                - service: light.turn_on
                  data:
                    entity_id: "{{ light_entities }}"
                    brightness_step_pct: 20
                    color_temp: 5000
                - delay: "00:00:01"  # 1 second delay to avoid rapid changes

      # Down Button (Button 3) - Decrease Brightness
      - conditions: '{{ command_type == "down_press" }}'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ state_attr(entity, "brightness")|int > 1 }}
                sequence:
                  - service: light.turn_on
                    data:
                      entity_id: "{{ light_entities }}"
                      brightness_step_pct: -10
                      color_temp: 5000
      - conditions: '{{ command_type == "down_double_press" }}'
        sequence:
          - service: light.turn_on
            data:
              entity_id: "{{ light_entities }}"
              brightness: 1  # Set brightness to minimum
              color_temp: 5000
      - conditions: '{{ command_type == "down_hold" }}'
        sequence:
          - repeat:
              while:
                - condition: state
                  entity_id: "{{ trigger.event.data.device_id }}"
                  state: "on"  # Ensure that the light is still on
              sequence:
                - choose:
                    - conditions:
                        - condition: template
                          value_template: >
                            {{ state_attr(entity, "brightness")|int > 1 }}
                      sequence:
                        - service: light.turn_on
                          data:
                            entity_id: "{{ light_entities }}"
                            brightness_step_pct: -20
                            color_temp: 5000
                - delay: "00:00:01"  # 1 second delay to avoid rapid changes

      # Bottom Button (Button 4) - Set light to white and turn off
      # Note: Some lights may still show as "on" even when turned off, so we first set it to white and minimal brightness before turning it off.
      - conditions: '{{ command_type == "bottom_press" }}'
        sequence:
          - service: light.turn_on
            data:
              entity_id: "{{ light_entities }}"
              color_name: "white"
              brightness: 1
              color_temp: 5000
          - delay: "00:00:01"  # Small delay to ensure the light is set to white
          - service: light.turn_off
            data:
              entity_id: "{{ light_entities }}"
      - conditions: '{{ command_type == "bottom_double_press" }}'
        sequence: !input "Bottom_Press2x"
      - conditions: '{{ command_type == "bottom_triple_press" }}'
        sequence: !input "Bottom_Press3x"

      # Top Button (Button 1) - Custom Actions
      - conditions: '{{ command_type == "top_press" }}'
        sequence: !input "Top_Press"
      - conditions: '{{ command_type == "top_double_press" }}'
        sequence: !input "Top_Press2x"
      - conditions: '{{ command_type == "top_triple_press" }}'
        sequence: !input "Top_Press3x"
      - conditions: '{{ command_type == "top_short_release" }}'
        sequence: !input "Top_Release"
      - conditions: '{{ command_type
