#-- Creation: 22 Sep 2024
#-- Version: 2.19 ALPHA

blueprint:
  name: Hue Dimmer v2 (v2.19 ALPHA)
  description: >
    Control a light entity/group with a Philips Hue Dimmer Switch (v2).
  domain: automation
  input:
    remote:
      name: Philips Hue Dimmer Switch
      description: Pick a RWL022 Dimmer Switch
      selector:
        device:
          integration: zha
          entity:
            domain: sensor
            device_class: battery
    initial_color_temp:
      name: Default Colour Temperature
      description: The default color temperature in Kelvin when the lights are turned on.
      selector:
        color_temp:
          min: 2100
          max: 6500
          unit: kelvin
      default: 3000
    light_entities:
      name: The light entities to control.
      description: The light entities to be controlled by the dimmer switch.
      selector:
        target:
          entity:
            domain: light
    brightness_steps:
      name: Percentage to increase or decrease brightness.
      description: The percentage to increase or decrease brightness when the button is pressed.
      selector:
        number:
          min: 1
          max: 50
          unit_of_measurement: "%"
      default: 18

mode: single

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      cluster_id: 64512

action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      brightness_steps: !input brightness_steps
      first_light: >
        {% if light_entities.entity_id is string %}
          {{ light_entities.entity_id }}
        {% else %}
          {{ expand(light_entities) | selectattr('domain', 'equalto', 'light') | map(attribute='entity_id') | first }}
        {% endif %}

  - choose:
      # Handle on_press (single press)
      - conditions: "{{ command == 'on_press' }}"
        sequence:
          - service: light.toggle
            target: !input light_entities
            data:
              transition: 0.4
              brightness: 255
              color_temp_kelvin: !input initial_color_temp

      # Handle off_press (single press)
      - conditions: "{{ command == 'off_press' }}"
        sequence:
          - service: light.turn_off
            target: !input light_entities
            data:
              transition: 0.4

      # Handle brightness increase with up_press and up_hold
      - conditions:
          - condition: or
            conditions:
              - "{{ command == 'up_press' }}"
              - "{{ command == 'up_hold' }}"
        sequence:
          - service: light.turn_on
            target: !input light_entities
            data:
              transition: 0.5
              brightness_step_pct: !input brightness_steps

      # Handle brightness decrease with down_press and down_hold
      - conditions:
          - condition: or
            conditions:
              - "{{ command == 'down_press' }}"
              - "{{ command == 'down_hold' }}"
        sequence:
          - service: light.turn_on
            target: !input light_entities
            data:
              transition: 0.5
              brightness_step_pct: "{{ brightness_steps*-1 }}"

      # Handle double-tap to increase color temperature by 1000K (up_double_press)
      - conditions: "{{ command == 'up_double_press' }}"
        sequence:
          - variables:
              current_color_temp: "{{ state_attr(first_light, 'color_temp_kelvin') | int(default=5500) }}"
          - service: light.turn_on
            target: !input light_entities
            data:
              transition: 0.5
              color_temp_kelvin: "{{ [current_color_temp + 1000, 6500] | min }}"

      # Handle double-tap to decrease color temperature by 1000K (down_double_press)
      - conditions: "{{ command == 'down_double_press' }}"
        sequence:
          - variables:
              current_color_temp: "{{ state_attr(first_light, 'color_temp_kelvin') | int(default=2500) }}"
          - service: light.turn_on
            target: !input light_entities
            data:
              transition: 0.5
              color_temp_kelvin: "{{ [current_color_temp - 1000, 2100] | max }}"
