#-- Creation: 8 Nov 2024
#-- Version: 2.34 ALPHA
# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
blueprint:
  name: Hue Dimmer v2 (v2.34 ALPHA)
  description: >
    Control a light entity/group with a Philips Hue Dimmer Switch (v2).
  domain: automation
  input:
    remote:
      name: Philips Hue Dimmer Switch
      description: Pick a RWL022 Dimmer Switch
      selector:
        device:
          integration: zha
          entity:
            domain: sensor
            device_class: battery
    initial_color_temp:
      name: Default Colour Temperature
      description: The default color temperature in Kelvin when the lights are turned on.
      selector:
        color_temp:
          min: 2100
          max: 6500
          unit: kelvin
      default: 3000
    light_entities:
      name: The light entities to control.
      description: The light entities to be controlled by the dimmer switch (can be a label, room, entity, or device).
      selector:
        target: {}
    brightness_steps:
      name: Percentage to increase or decrease brightness.
      description: The percentage to increase or decrease brightness when the button is pressed.
      selector:
        number:
          min: 1
          max: 50
          unit_of_measurement: "%"
      default: 18
    off_double_press_action:
      name: Action for Off Double Press
      description: Specify the service call to execute when the off button is double pressed.
      selector:
        action: {}
      default: []

mode: single

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      cluster_id: 64512

action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      brightness_steps: !input brightness_steps
      # Expand the target, which can be a label, device, or individual entity, into a list of light entities
      light_entities: "{{ expand(target_entities(light_entities)) | selectattr('domain', 'equalto', 'light') | map(attribute='entity_id') | list }}"
      first_light: "{{ light_entities | first if light_entities | length > 0 else none }}"
      current_color_temp: "{{ state_attr(first_light, 'color_temp_kelvin') | int(default=0) if first_light else 0 }}"

  # Log variables for debugging
  - service: system_log.write
    data:
      level: warning
      message: >
        [DEBUG] Command received: {{ command }}
        [DEBUG] Light entities: {{ light_entities }}
        [DEBUG] First light entity: {{ first_light }}
        [DEBUG] Current color temperature: {{ current_color_temp }}
        [DEBUG] Brightness step percentage: {{ brightness_steps }}

  - choose:
      # Handle on_press (single press)
      - conditions: "{{ command == 'on_press' and first_light != none }}"
        sequence:
          - service: system_log.write
            data:
              level: info
              message: "[DEBUG] on_press detected: Toggling light."

          - service: light.toggle
            target: !input light_entities
            data:
              transition: 0.4
              brightness: 255
              color_temp_kelvin: !input initial_color_temp

      # Handle off_press (single press)
      - conditions: "{{ command == 'off_press' and first_light != none }}"
        sequence:
          - service: system_log.write
            data:
              level: info
              message: "[DEBUG] off_press detected: Turning off light."

          - service: light.turn_off
            target: !input light_entities
            data:
              transition: 0.4

      # Handle brightness increase with up_press and up_hold
      - conditions:
          - condition: or
            conditions:
              - "{{ command == 'up_press' }}"
              - "{{ command == 'up_hold' }}"
        sequence:
          - service: system_log.write
            data:
              level: info
              message: "[DEBUG] Brightness up detected. Increasing brightness by {{ brightness_steps }}%."

          - service: light.turn_on
            target: !input light_entities
            data:
              transition: 0.5
              brightness_step_pct: !input brightness_steps

      # Handle brightness decrease with down_press and down_hold
      - conditions:
          - condition: or
            conditions:
              - "{{ command == 'down_press' }}"
              - "{{ command == 'down_hold' }}"
        sequence:
          - service: system_log.write
            data:
              level: info
              message: "[DEBUG] Brightness down detected. Decreasing brightness by {{ brightness_steps }}%."

          - service: light.turn_on
            target: !input light_entities
            data:
              transition: 0.5
              brightness_step_pct: "{{ brightness_steps * -1 }}"

      # Handle double-tap to increase color temperature (up_double_press)
      - conditions: "{{ command == 'up_double_press' and first_light != none }}"
        sequence:
          - service: system_log.write
            data:
              level: info
              message: "[DEBUG] Double press up detected. Current color temp: {{ current_color_temp }}. Increasing color temperature."

          - service: light.turn_on
            target: !input light_entities
            data:
              transition: 0.5
              color_temp_kelvin: >
                {% if current_color_temp == 0 %}
                  6000
                {% else %}
                  {{ [current_color_temp + 1000, 6500] | min }}
                {% endif %}

      # Handle double-tap to decrease color temperature (down_double_press)
      - conditions: "{{ command == 'down_double_press' }}"
        sequence:
          - service: system_log.write
            data:
              level: info
              message: "[DEBUG] Double press down detected. Current color temp: {{ current_color_temp }}. Decreasing color temperature."

          - service: light.turn_on
            target: !input light_entities
            data:
              transition: 0.5
              color_temp_kelvin: >
                {% if current_color_temp == 0 %}
                  2500
                {% else %}
                  {{ [current_color_temp - 1000, 2100] | max }}
                {% endif %}
