#-- Creation: 22 Sep 2024
#-- Version: 1.8

blueprint:
  name: Hue Dimmer v2 Control (v1.8)
  description: >
    Control a single light entity with a Philips Hue Dimmer Switch (v2) and adjust color temperature with double clicks.
  domain: automation
  input:
    remote:
      name: Philips Hue Dimmer Switch
      description: Pick a RWL022 Dimmer Switch
      selector:
        device:
          integration: zha
          entity:
            domain: sensor
            device_class: battery
    light_entity:
      name: The light entity to control.
      description: The light entity to be controlled by the dimmer switch.
      selector:
        entity:
          domain: light
    brightness_steps:
      name: Percentage to increase or decrease brightness.
      description: The percentage to increase or decrease brightness when the button is pressed.
      selector:
        number:
          min: 1
          max: 50
          unit_of_measurement: "%"
      default: 18

  mode: restart

  trigger:
    - platform: event
      event_type: zha_event
      event_data:
        device_id: !input "remote"
        cluster_id: 64512

  action:
    - variables:
        command: "{{ trigger.event.data.command }}"
        min_temp: "{{ state_attr(light_entity, 'min_mireds') | default(2000) | float * 100 }}"
        max_temp: "{{ state_attr(light_entity, 'max_mireds') | default(6500) | float * 100 }}"
        current_color_temp: "{{ state_attr(light_entity, 'color_temp') | default(min_temp) }}"
        temp_range: "{{ max_temp - min_temp }}"
        increment: "{{ (temp_range / 4) | round }}"

    - choose:
        # Handle on_short_release (single press)
        - conditions: "{{ command == 'on_short_release' }}"
          sequence:
            - service: light.toggle
              data:
                entity_id: !input "light_entity"
                transition: 0.4
                brightness: 255
                color_temp: "{{ (min_temp + temp_range / 2) | round }}"

        # Handle off_short_release (off action remains the same)
        - conditions: "{{ command == 'off_short_release' }}"
          sequence:
            - service: light.turn_off
              data:
                entity_id: !input "light_entity"
                transition: 0.4

        # Handle brightness increase with up_short_release and up_hold
        - conditions:
            - condition: or
              conditions:
                - "{{ command == 'up_short_release' }}"
                - "{{ command == 'up_hold' }}"
          sequence:
            - service: light.turn_on
              data:
                entity_id: !input "light_entity"
                transition: 0.5
                brightness_step_pct: "{{ brightness_steps }}"

        # Handle brightness decrease with down_short_release and down_hold
        - conditions:
            - condition: or
              conditions:
                - "{{ command == 'down_short_release' }}"
                - "{{ command == 'down_hold' }}"
          sequence:
            - service: light.turn_on
              data:
                entity_id: !input "light_entity"
                transition: 0.5
                brightness_step_pct: "{{ brightness_steps*-1 }}"

        # Handle double-tap to adjust temperature
        - conditions: "{{ command == 'up_double_release' }}"
          sequence:
            - service: light.turn_on
              data:
                entity_id: !input "light_entity"
                transition: 0.5
                color_temp: "{{ [max_temp, (current_color_temp + increment) | min(max_temp)] | max(min_temp) }}"

        - conditions: "{{ command == 'down_double_release' }}"
          sequence:
            - service: light.turn_on
              data:
                entity_id: !input "light_entity"
                transition: 0.5
                color_temp: "{{ [min_temp, (current_color_temp - increment) | max(min_temp)] | min(max_temp) }}"

  
